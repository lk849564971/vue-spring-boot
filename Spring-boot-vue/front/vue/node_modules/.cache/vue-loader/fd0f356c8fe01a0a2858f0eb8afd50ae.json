{"remainingRequest":"F:\\eclipse\\Spring-boot\\front\\secondhand\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\eclipse\\Spring-boot\\front\\secondhand\\src\\components\\Register.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"F:\\eclipse\\Spring-boot\\front\\secondhand\\src\\components\\Register.vue","mtime":1590560454808},{"path":"F:\\eclipse\\Spring-boot\\front\\secondhand\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\eclipse\\Spring-boot\\front\\secondhand\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\eclipse\\Spring-boot\\front\\secondhand\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\eclipse\\Spring-boot\\front\\secondhand\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\eclipse\\Spring-boot\\front\\secondhand\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNjb250YWluZXIgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIi4vYXNzZXRzL2JhY2tncm91ZDIucG5nIik7CiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsKICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9Cg=="},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <el-container>\n    <el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"600px\">\n      <el-form-item label-width=\"600px\">\n        <div class=\"div-head\">Register</div>\n      </el-form-item>\n      <el-form-item label=\"Username\" prop=\"username\">\n        <el-input v-model=\"ruleForm.username\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Password\" prop=\"pwd\">\n        <el-input type=\"password\" v-model=\"ruleForm.pwd\" autocomplete=\"off\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Confirm password\" prop=\"checkPass\">\n        <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\n      </el-form-item>\n\n      <el-form-item>\n        <el-button el-button type=\"warning\" plain @click=\"submitInfo()\">注册</el-button>\n        <!-- <el-button el-button type=\"warning\" plain @click=\"submitInfo\">注册</el-button> -->\n        <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n      </el-form-item>\n    </el-form>\n  </el-container>\n</template>\n<style >\n#container {\n  width: 100%;\n  height: 100%;\n  background-image: url(\"./assets/backgroud2.png\");\n  background-size: cover;\n  background-position: center;\n  position: relative;\n}\n</style>\n<script>\nexport default {\n  data() {\n    var checkName = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error(\"Username cannot be empty\"));\n      }\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"Please input password\"));\n      } else {\n        if (this.ruleForm.checkPass !== \"\") {\n          this.$refs.ruleForm.validateField(\"checkPass\");\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"please input password again\"));\n      } else if (value !== this.ruleForm.pwd) {\n        callback(new Error(\"The two passwords are inconsistent\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        pwd: \"\",\n        username: \"\",\n        checkPass: \"\"\n      },\n      rules: {\n        pwd: [{ validator: validatePass, trigger: \"blur\" }],\n        checkPass: [{ validator: validatePass2, trigger: \"blur\" }],\n        username: [{ validator: checkName, trigger: \"blur\" }]\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          alert(\"submit!\");\n          //发送请求\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    toLoginPage: function() {\n      this.$router.push(\"/\");\n    },\n    submitInfo() {\n      //两次密码不一致重新输入\n      if (this.ruleForm.pwd != this.ruleForm.checkPass) {\n        this.$alert(\"两次密码不一致,请重新输入\", \"提示\", {\n          confirmButtonText: \"确定\"\n        });\n        this.ruleForm.pwd = \"\";\n        this.ruleForm.checkPass = \"\";\n        return false;\n      }\n      // 发送注册请求\n      this.$axios({\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        method: \"POST\",\n        url: \"api/addUser\",\n        data: this.$qs.stringify({\n          username: this.ruleForm.username,\n          pwd: this.ruleForm.pwd\n        })\n      })\n        .then(res => {\n          console.log(res.data);\n          if (res.data == true) {\n            //响应注册成功\n            this.$alert(\"注册成功\", \"提示\", {\n              confirmButtonText: \"确定\"\n            });\n            this.$router.push(\"/\");\n          } else {\n            //响应注册失败\n            this.$alert(\"注册失败,请重新创建\", \"提示\", {\n              confirmButtonText: \"确定\"\n            });\n          }\n        })\n        .catch(Error => {\n          console.log(Error);\n        });\n    }\n  }\n};\n</script>\n"]}]}